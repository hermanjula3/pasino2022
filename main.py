# Python code @beducode
 

import base64, codecs
magic = 'aW1wb3J0IHJlcXVlc3RzDQppbXBvcnQganNvbg0KaW1wb3J0IHRpbWUNCmltcG9ydCBzeXMNCmltcG9ydCByYW5kb20NCmltcG9ydCBhcmdwYXJzZQ0KaW1wb3J0IGNvbG9yYW1hDQppbXBvcnQgcGF0aGxpYg0KaW1wb3J0IG1hdGgNCmltcG9ydCBnZXRwYXNzDQppbXBvcnQgc29ja2V0DQppbXBvcnQgZGF0ZXRpbWUgYXMgZHQNCmltcG9ydCBrZXlib2FyZA0KaW1wb3J0IHdlYnNvY2tldA0KaW1wb3J0IGhhc2hsaWINCmltcG9ydCBkZWNpbWFsDQppbXBvcnQgcmUNCmZyb20gZGVjaW1hbCBpbXBvcnQgRGVjaW1hbCwgZ2V0Y29udGV4dA0KZnJvbSBjb2xvcmFtYSBpbXBvcnQgRm9yZSwgQmFjaywgU3R5bGUNCmZyb20gcmFuZG9tIGltcG9ydCByYW5kaW50LCB1bmlmb3JtDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZSwgZGF0ZSwgdGltZWRlbHRhDQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRlDQpmcm9tIGRhdGV0aW1lIGltcG9ydCB0aW1lZGVsdGENCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4NCmZyb20gb3MgaW1wb3J0IHN5c3RlbSwgbmFtZQ0KZnJvbSBpbnB1dGltZW91dCBpbXBvcnQgaW5wdXRpbWVvdXQsIFRpbWVvdXRPY2N1cnJlZA0KZnJvbSBmYXVuYWRiIGltcG9ydCBxdWVyeSBhcyBxDQpmcm9tIGZhdW5hZGIub2JqZWN0cyBpbXBvcnQgUmVmDQpmcm9tIGZhdW5hZGIuY2xpZW50IGltcG9ydCBGYXVuYUNsaWVudA0KZnJvbSByYW5kb21fdXNlcl9hZ2VudC51c2VyX2FnZW50IGltcG9ydCBVc2VyQWdlbnQNCmZyb20gcmFuZG9tX3VzZXJfYWdlbnQucGFyYW1zIGltcG9ydCBTb2Z0d2FyZU5hbWUsIE9wZXJhdGluZ1N5c3RlbQ0KDQpzb2Z0d2FyZV9uYW1lcyA9IFtTb2Z0d2FyZU5hbWUuQ0hST01FLnZhbHVlXQ0Kb3BlcmF0aW5nX3N5c3RlbXMgPSBbT3BlcmF0aW5nU3lzdGVtLldJTkRPV1MudmFsdWUsDQogICAgICAgICAgICAgICAgICAgICBPcGVyYXRpbmdTeXN0ZW0uTElOVVgudmFsdWVdDQoNCnVzZXJfYWdlbnRfcm90YXRvciA9IFVzZXJBZ2VudCgNCiAgICBzb2Z0d2FyZV9uYW1lcz1zb2Z0d2FyZV9uYW1lcywgb3BlcmF0aW5nX3N5c3RlbXM9b3BlcmF0aW5nX3N5c3RlbXMsIGxpbWl0PTEwMA0KKQ0KDQpjb2xvcmFtYS5pbml0KGF1dG9yZXNldD1UcnVlKQ0KDQojIFNFVCBCRVRTRVQNCnBhcnNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSJQQVNJTk8uQ09NIEJPVCBAYmVkdWNvZGUiKQ0KcGFyc2VyLmFkZF9hcmd1bWVudCgNCiAgICAiLWMiLCAiLS1iZXRzZXQiLCBkZWZhdWx0PTAsIGhlbHA9IkVudGVyIFlvdXIgQmV0c2V0IE51bWJlciAoZGVmYXVsdDogMCkiDQopDQpteV9uYW1lc3BhY2UgPSBwYXJzZXIucGFyc2VfYXJncygpDQpub2JldCA9IGludChteV9uYW1lc3BhY2UuYmV0c2V0KQ0KDQojIExPQUQgU0VUVElORw0Kd2l0aCBvcGVuKCJzZXR0aW5ncy5qc29uIiwgInIiKSBhcyBmaWxlc2V0dXA6DQogICAgZGF0YSA9IGZpbGVzZXR1cC5yZWFkKCkNCm9iID0ganNvbi5sb2FkcyhkYXRhKQ0KDQp3c29ja2V0ID0gd2Vic29ja2V0LldlYlNvY2tldCgpDQoNCiMgQ09ORklHIFdBUk5BYmV0dA0KcmVzID0gU3R5bGUuUkVTRVRfQUxMDQpwdXRpaCA9IFN0eWxlLk5PUk1BTCArIEZvcmUuV0hJVEUNCnB1dGloMiA9IFN0eWxlLkJSSUdIVCArIEZvcmUuV0hJVEUNCmhpdGFtID0gU3R5bGUuTk9STUFMICsgRm9yZS5CTEFDSw0KaGl0YW0yID0gU3R5bGUuQlJJR0hUICsgRm9yZS5CTEFDSw0KdW5ndSA9IFN0eWxlLk5PUk1BTCArIEZvcmUuTUFHRU5UQQ0KaGlqYXUgPSBTdHlsZS5OT1JNQUwgKyBGb3JlLkdSRUVODQpoaWphdTIgPSBTdHlsZS5CUklHSFQgKyBGb3JlLkdSRUVODQptZXJhaCA9IFN0eWxlLk5PUk1BTCArIEZvcmUuUkVEDQptZXJhaDIgPSBTdHlsZS5CUklHSFQgKyBGb3JlLlJFRA0KYmlydSA9IFN0eWxlLk5PUk1BTCArIEZvcmUuQkxVRQ0KYmlydTIgPSBTdHlsZS5CUklHSFQgKyBGb3JlLkJMVUUNCmJpcnUzID0gU3R5bGUuQlJJR0hUICsgRm9yZS5MSUdIVENZQU5fRVgNCnByb2Zjb2xvciA9IFN0eWxlLkJSSUdIVCArIEJhY2suR1JFRU4gKyBGb3JlLldISVRFDQpyYmNvbG9yID0gU3R5bGUuTk9STUFMICsgQmFjay5ZRUxMT1cgKyBGb3JlLkJMQUNLDQpsb3NlY29sb3IgPSBTdHlsZS5CUklHSFQgKyBCYWNrLlJFRCArIEZvcmUuV0hJVEUNCnJjY29sb3IgPSBTdHlsZS5CUklHSFQgKyBCYWNrLldISVRFICsgRm9yZS5CTEFDSw0KcmNmb250Y29sb3IgPSBTdHlsZS5OT1JNQUwgKyBGb3JlLkJMQUNLDQprdW5pbmcgPSBTdHlsZS5OT1JNQUwgKyBGb3JlLllFTExPVw0Ka3VuaW5nMiA9IFN0eWxlLkJSSUdIVCArIEZvcmUuWUVMTE9XDQpjeWFuID0gU3R5bGUuTk9STUFMICsgRm9yZS5DWUFODQpjeWFuMiA9IFN0eWxlLkJSSUdIVCArIEZvcmUuTElHSFRDWUFOX0VYDQoNCg0KYyA9IHJlcXVlc3RzLlNlc3Npb24oKQ0KcHJveGllcyA9IFtdDQpmcmVldmVyc2lvbiA9IEZhbHNlDQpzdG9wb253aW5hY3RpdmF0ZWQgPSBGYWxzZQ0KY29ubmVjdGVkID0gVHJ1ZQ0KdXVpZCA9ICIiDQpiYXNldXVpZCA9ICIiDQpyZWd1c2VybmFtZSA9ICIiDQpyZWdwYXNzd29yZCA9ICIiDQpyZWdlbWFpbCA9ICIiDQpsb2dpbnVzZXIgPSAiIg0KbG9naW5wYXNzID0gIiINCnN0YXJ0YmFscyA9IDANCnVzZXJfYWdlbnQgPSB1c2VyX2FnZW50X3JvdGF0b3IuZ2V0X3JhbmRvbV91c2VyX2FnZW50KCkNCnJlZ2V4ID0gcidcYltBLVphLXowLTkuXyUrLV0rQFtBLVphLXowLTkuLV0rXC5bQS1afGEtel17Mix9XGInDQpjbGllbnQgPSBGYXVuYUNsaWVudChzZWNyZXQ9ImZuQUVBY0FLbGlBQ0NKSDAwQmZWU0gyZFBaMEVJTVBXSGxNQ1RiRVgiKQ0KYXBpQWtzZXMgPSAiYjFkNzc0YjBjOTQwMDlkMDNhNDdhNDU3MDkwMDcyYWNlNGM0NGRkOTUyMTc0OWNiNzUyODY5N2Q4MGE2MjU2MiINCg0KaGVhZGVyID0gew0KICAgICJjb250ZW50LXR5cGUiOiAiYXBwbGljYXRpb24vanNvbiIsDQogICAgInVzZXItYWdlbnQiOiB1c2VyX2FnZW50LA0KICAgICJ4LXJlcXVlc3RlZC13aXRoIjogIlhNTEh0dHBSZXF1ZXN0Ig0KfQ0KDQojIENPTlRST0xMRVIgUFJPQ0VTUw0KDQojIEtFWUJPQVJEIFNIT1JUQ1VUDQpzdG9wb253aW5rZXkgPSAiY3RybCtzaGlmdCt3Ig0KDQoNCmRlZiBzdG9wb253aW5fdHJpZ2VyKCk6DQogICAgZ2xvYmFsIHN0b3BvbndpbmFjdGl2YXRlZA0KICAgIHN0b3BvbndpbmFjdGl2YXRlZCA9IFRydWUNCg0KDQojIEJBTk5FUg0KZGVmIGJhbm5lcigpOg0KICAgIGJhbm5lciA9ICJcblxuIg0KICAgIGJhbm5lciA9IGJhbm5lciArIGJpcnUzICsgIiDiloTiloTiloTCtyDiloTiloTiloTCtyAu4paE4paEIMK3IOKWqiAgIOKWkCDiloQgICAgICAgICDiloTiloTCtyAgICAgICDigKIg4paMIOKWhCDCty4gXG4iDQogICAgYmFubmVyID0gYmFubmVyICsgIuKWkOKWiCDiloTilojilpDilogg4paA4paIIOKWkOKWiCDiloAuIOKWiOKWiCDigKLilojilozilpDilojilqogICAgICDilpDilogg4paM4paq4paqICAgICDCt+KWiOKWiCDilpDilojilojilojilqogIFxuIg0KICAgIGJhbm5lciA9IGJhbm5lciArICIg4paI4paI4paAwrfiloTilojiloDiloDilogg4paE4paA4paA4paA4paI4paE4paQ4paIwrfilpDilojilpDilpDilowg4paE4paI4paA4paEICDilojilogg4paE4paEIOKWhOKWiOKWgOKWhCDilpDilogg4paM4paQ4paM4paQ4paIwrciICsgYmlydTIgKyAi4paqXG4iDQogICAgYmFubmVyID0gYmFubmVyICsgIuKWkOKWiOKWqsK34oCi4paQ4paIIOKWquKWkOKWjOKWkOKWiOKWhOKWquKWkOKWiOKWkOKWiOKWjOKWiOKWiOKWkOKWiOKWjOKWkOKWiOKWjC7ilpDilowg4paQ4paI4paI4paI4paM4paQ4paI4paMLuKWkOKWjOKWiOKWiCDilojilojilozilpDilojiloxcbiINCiAgICBiYW5uZXIgPSBiYW5uZXIgKyAiLuKWgCAgICDiloAgIOKWgCAg4paA4paA4paA4paAIOKWgOKWgOKWgOKWgOKWgCDilojilqog4paA4paI4paE4paA4paq4paAwrfiloDiloDiloAgIOKWgOKWiOKWhOKWgOKWquKWgOKWgCAg4paI4paq4paA4paA4paAIFxuIg0KICAgIGJhbm5lciA9IGJhbm5lciArICJcbiINCg0KICAgIGJhbm5lciA9IGJhbm5lciArIHB1dGloMiArICJBdXRob3IgICAgICA6ICINCiAgICBiYW5uZXIgPSBiYW5uZXIgKyBiaXJ1MiArICJnaXRodWJAYmVkdWNvZGVcbiINCiAgICBiYW5uZXIgPSBiYW5uZXIgKyBwdXRpaDIgKyAiQ29udGFjdCAgICAgOiAiDQogICAgYmFubmVyID0gYmFubmVyICsgYmlydTIgKyAiQGJlZHVwbGF5IHwgQHJpb3N1eWFudG8gXG4iDQogICAgYmFubmVyID0gYmFubmVyICsgcHV0aWgyICsgIlZlcnNpb24gICAgIDogIg0KICAgIGJhbm5lciA9IGJhbm5lciArIGJpcnUyICsgInYuMi4wXG4iICsgcmVzDQogICAgcHJpbnQoYmFubmVyKQ0KDQoNCmRlZiB0aW1lcHJvY2VzcyhzZWMpOg0KICAgIG1pbnV0ZXMsIHNlY29uZHMgPSBkaXZtb2Qoc2VjLCA2MCkNCiAgICBob3VycywgbWludXRlcyA9IGRpdm1vZChtaW51dGVzLCA2MCkNCiAgICBkYXlzLCBob3VycyA9IGRpdm1vZChob3VycywgMjQpDQogICAgc3RvcHdhdGNoeCA9IChkYXlzLCBob3VycywgbWludXRlcywgc2Vjb25kcykNCg0KICAgIHJldHVybiBzdG9wd2F0Y2h4DQoNCg0KIyBDTEVBTiBQQUdFDQpkZWYgY2xlYXIoKToNCg0KICAgICMgV0lORE9XUw0KICAgIGlmIG5hbWUgPT0gIm50IjoNCiAgICAgICAgXyA9IHN5c3RlbSgiY2xzIikNCg0KICAgICMgTUFDIC8gTElOVVgNCiAgICBlbHNlOg0KICAgICAgICBfID0gc3lzdGVtKCJjbGVhciIpDQoNCg0KIyBGT1JNQVQgREVDSU1BTCA4IERJR0lUDQpkZWYgcmV2KG51bSk6DQogICAgaWYgbGVuKG51bSkgPCA4Og0KICAgICAgICBwYW5qYW5nX25vbCA9IGludCg4IC0gbGVuKG51bSkpDQogICAgICAgIG51bSA9IChwYW5qYW5nX25vbCAqICIwIikgKyBzdHIobnVtKQ0KICAgICAgICByZXN1bHQgPSAiMC4iICsgbnVtDQogICAgaWYgbGVuKG51bSkgPT0gODoNCiAgICAgICAgcGFuamFuZ19ub2wgPSBpbnQoOCAtIGxlbihudW0pKQ0KICAgICAgICBudW0gPSAocGFuamFuZ19ub2wgKiAiMCIpICsgc3RyKG51bSkNCiAgICAgICAgcmVzdWx0ID0gIjAuIiArIG51bQ0KICAgIGVsc2U6DQogICAgICAgIGxlbl9udW0gPSBsZW4obnVtKQ0KICAgICAgICBlbmQgPSBudW1bLTg6XQ0KICAgICAgICBmaXJzdCA9IG51bVs6IGxlbl9udW0gLSA4XQ0KICAgICAgICByZXN1bHQgPSBmaXJzdCArICIuIiArIGVuZA0KICAgIHJldHVybiByZXN1bHQNCg0KIyBGT1JNQVQgREVDSU1BTCA4IERJR0lUDQpkZWYgcmV2bWluYmFsKG51bSk6DQogICAgaWYgbGVuKG51bSkgPCA4Og0KICAgICAgICBwYW5qYW5nX25vbCA9IGludCg4IC0gbGVuKG51bSkpDQogICAgICAgIG51bSA9IChwYW5qYW5nX25vbCAqICIwIikgKyBzdHIobnVtKQ0KICAgICAgICByZXN1bHQgPSAiMC4iICsgbnVtDQogICAgaWYgbGVuKG51bSkgPT0gODoNCiAgICAgICAgcGFuamFuZ19ub2wgPSBpbnQoOCAtIGxlbihudW0pKQ0KICAgICAgICBudW0gPSAocGFuamFuZ19ub2wgKiAiMCIpICsgc3RyKG51bSkNCiAgICAgICAgcmVzdWx0ID0gIjAuIiArIG51bQ0KICAgIGVsc2U6DQogICAgICAgIGxlbl9udW0gPSBsZW4obnVtKQ0KICAgICAgICBlbmQgPSBudW1bLTg6XQ0KICAgICAgICBmaXJzdCA9IG51bVs6IGxlbl9udW0gLSA4XQ0KICAgICAgICByZXN1bHQgPSBmaXJzdA0KICAgIHJldHVybiByZXN1bHQNCg0KIyBGT1JNQVQgREVDSU1BTCA1IERJR0lUDQpkZWYgcmV2bXVsdGkobnVtKToNCiAgICBpZiBsZW4obnVtKSA8IDU6DQogICAgICAgIHBhbmphbmdfbm9sID0gaW50KDUgLSBsZW4obnVtKSkNCiAgICAgICAgbnVtID0gKHBhbmphbmdfbm9sICogIjAiKSArIHN0cihudW0pDQogICAgICAgIHJlc3VsdCA9ICIwLiIgKyBudW0NCiAgICBpZiBsZW4obnVtKSA9PSA4Og0KICAgICAgICBwYW5qYW5nX25vbCA9IGludCg1IC0gbGVuKG51bSkpDQogICAgICAgIG51bSA9IChwYW5qYW5nX25vbCAqICIwIikgKyBzdHIobnVtKQ0KICAgICAgICByZXN1bHQgPSAiMC4iICsgbnVtDQogICAgZWxzZToNCiAgICAgICAgbGVuX251bSA9IGxlbihudW0pDQogICAgICAgIGVuZCA9IG51bVstNTpdDQogICAgICAgIGZpcnN0ID0gbnVtWzogbGVuX251bSAtIDVdDQogICAgICAgIHJlc3VsdCA9IGZpcnN0ICsgIi4iICsgZW5kDQogICAgcmV0dXJuIHJlc3VsdA0KDQoNCiMgRk9STUFUIERFQ0lNQUwgMTAgRElHSVQNCmRlZiByZXZ3b2xmKG51bSk6DQogICAgaWYgbGVuKG51bSkgPCAxMDoNCiAgICAgICAgcGFuamFuZ19ub2wgPSBpbnQoMTAgLSBsZW4obnVtKSkNCiAgICAgICAgbnVtID0gKHBhbmphbmdfbm9sICogIjAiKSArIHN0cihudW0pDQogICAgICAgIHJlc3VsdCA9ICIwLiIgKyBudW0NCiAgICBpZiBsZW4obnVtKSA9PSAxMDoNCiAgICAgICAgcGFuamFuZ19ub2wgPSBpbnQoMTAgLSBsZW4obnVtKSkNCiAgICAgICAgbnVtID0gKHBhbmphbmdfbm9sICogIjAiKSArIHN0cihudW0pDQogICAgICAgIHJlc3VsdCA9ICIwLiIgKyBudW0NCiAgICBlbHNlOg0KICAgICAgICBsZW5fbnVtID0gbGVuKG51bSkNCiAgICAgICAgZW5kID0gbnVtWy0xMDpdDQogICAgICAgIGZpcnN0ID0gbnVtWzogbGVuX251bSAtIDEwXQ0KICAgICAgICByZXN1bHQgPSBmaXJzdCArICIuIiArIGVuZA0KICAgICAgICB0bXBycyA9IGludChmbG9hdChyZXN1bHQpICogKDEwICoqIDEwKSkNCiAgICAgICAgcmVzdWx0ID0gZmlyc3QgKyAiLiIgKyBlbmQNCiAgICByZXR1cm4gcmVzdWx0DQoNCg0KIyBGT1JNQVQgMTEgRElHSVQNCmRlZiByZXZ3b2xmYmV0KG51bSk6DQogICAgaWYgbGVuKG51bSkgPCAxMToNCiAgICAgICAgcGFuamFuZ19ub2wgPSBpbnQoMTEgLSBsZW4obnVtKSkNCiAgICAgICAgbnVtID0gKHBhbmphbmdfbm9sICogIjAiKSArIHN0cihudW0pDQogICAgICAgIHJlc3VsdCA9ICIwLiIgKyBudW0NCiAgICBpZiBsZW4obnVtKSA9PSAxMToNCiAgICAgICAgcGFuamFuZ19ub2wgPSBpbnQoMTEgLSBsZW4obnVtKSkNCiAgICAgICAgbnVtID0gKHBhbmphbmdfbm9sICogIjAiKSArIHN0cihudW0pDQogICAgICAgIHJlc3VsdCA9ICIwLiIgKyBudW0NCiAgICBlbHNlOg0KICAgICAgICBsZW5fbnVtID0gbGVuKG51bSkNCiAgICAgICAgZW5kID0gbnVtWy0xMTpdDQogICAgICAgIGZpcnN0ID0gbnVtWzogbGVuX251bSAtIDExXQ0KICAgICAgICByZXN1bHQgPSBmaXJzdCArICIuIiArIGVuZA0KICAgICAgICB0bXBycyA9IGludChmbG9hdChyZXN1bHQpICogKDEwICoqIDExKSkNCiAgICAgICAgcmVzdWx0ID0gZmlyc3QgKyAiLiIgKyBlbmQNCiAgICByZXR1cm4gcmVzdWx0DQoNCg0KIyBSRUZSRVNIIFBBR0UNCmRlZiByZWZyZXNoX3BhZ2UoKToNCiAgICBjbGVhcigpDQogICAgYmFubmVyKCkNCg0KDQojIEFQSSBJTkRPREFYIEZPUiBHRVQgTEFTVCBQUklDRQ0KZGVmIGluZG9kYXgoY29pbik6DQogICAgdHJ5Og0KICAgICAgICBwYWlyID0gKGNvaW4pLmxvd2VyKCkgKyAiX2lkciINCg0KICAgICAgICB1cmwgPSAiaHR0cHM6Ly9pbmRvZGF4LmNvbS9hcGkvIiArIHN0cihwYWlyKSArICIvdGlja2VyIg0KDQogICAgICAgIGluZHggPSBjLmdldCh1cmwpDQogICAgICAgIGpzaW5keCA9IGpzb24ubG9hZHMoaW5keC50ZXh0KQ0KICAgICAgICBwcmljZXBhaXIgPSBpbnQoanNpbmR4WyJ0aWNrZXIiXVsibGFzdCJdKQ0KICAgIGV4Y2VwdDoNCiAgICAgICAgY29pbnBhaXIgPSAoY29pbikubG93ZXIoKSArICJfaWRyIg0KDQogICAgICAgIHVybCA9ICJodHRwczovL2JlZHVjb2RlLXByaWNlLmhlcm9rdWFwcC5jb20vcHJpY2UvIiArIHN0cihjb2lucGFpcikNCg0KICAgICAgICBwcmljZSA9IGMuZ2V0KHVybCkNCiAgICAgICAgZGF0YSA9IGpzb24ubG9hZHMocHJpY2UudGV4dCkNCiAgICAgICAgcHJpY2VwYWlyID0gZGF0YVsibGFzdCJdDQoNCiAgICByZXR1cm4gcHJpY2VwYWlyDQoNCg0KIyBGT1JNQVQgVkFMVUUgVE8gSURSDQpkZWYgcnVwaWFoX2Zvcm1hdChhbmdrYSk6DQogICAgcmV0dXJuICJScCAiICsgIns6MCwuMmZ9Ii5mb3JtYXQoYW5na2EpDQoNCg0KIyBGT1JNQVQgVkFMVUUgVE8gVVNEDQpkZWYgZG9sbGFyX2Zvcm1hdChhbmdrYSk6DQogICAgcmV0dXJuICIkICIgKyAiezowLC4yZn0iLmZvcm1hdChhbmdrYSkNCg0KDQojIExJU1QgRU5EIFBPSU5UDQpkZWYgbmF2aWdhdGVfYXBpKG5hdik6DQogICAgc3dpdGNoZXIgPSB7DQogICAgICAgIDE6ICJodHRwczovL2FwaS5wYXNpbm8uY29tL2FwaS9yZWdpc3RlciIsDQogICAgICAgIDI6ICJodHRwczovL2FwaS5wYXNpbm8uY29tL2FwaS9sb2dpbiIsDQogICAgICAgIDM6ICJodHRwczovL2FwaS5wYXNpbm8uY29tL2FjY291bnQvZ2V0LXNvY2tldC10b2tlbiIsDQogICAgICAgIDQ6ICJ3c3M6Ly9zb2NrZXQucGFzaW5vLmNvbS9kaWNlLyIsDQogICAgICAgIDU6ICJodHRwczovL2FwaS5wYXNpbm8uY29tL2RpY2UvcGxheSIsDQogICAgICAgIDY6ICJodHRwczovL2FwaS5wYXNpbm8uY29tL2RpY2UvZ2V0LXNlZWQiDQogICAgfQ0KDQogICAgcmV0dXJuIHN3aXRjaGVyLmdldChuYXYsICJub3RoaW5nIikNCg0KIyMgV1MgTkFWSUdBVElPTg0KZGVmIG5hdmlnYXRlX3dzKG5hdik6DQogICAgc3dpdGNoZXIgPSB7DQogICAgICAgIDE6ICJpbml0aWFsaXphdGlvbiIsDQogICAgICAgIDI6ICJnZXRfY29pbl9wYXJhbWV0ZXJzIiwNCiAgICAgICAgMzogImdldF9iYWxhbmNlIiwNCiAgICAgICAgNDogInBsYWNlX2JldCIsDQogICAgfQ0KICAgIA0KICAgIHJldHVybiBzd2l0Y2hlci5nZXQobmF2LCAibm90aGluZyIpDQoNCmRlZiBjYWxsX2FwaShtZXRob2QsIHVybCwgaGQsIGR0KToNCiAgICByZXN1bHQgPSBOb25lDQogICAgd2hpbGUgcmVzdWx0IGlzIE5vbmU6DQogICAgICAgIGlmIG1ldGhvZCA9PSAiR0VUIjoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAjIGNvbm5lY3QNCiAgICAgICAgICAgICAgICByZXN1bHQgPSBjLmdldCh1cmwsIGhlYWRlcnM9aGQsIGRhdGE9ZHQpDQogICAgICAgICAgICAgICAgaWYgcmVzdWx0LnN0YXR1c19jb2RlICE9IDIwMDoNCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBOb25lDQogICAgICAgICAgICAgICAgICAgIGNhbGxfYXBpKG1ldGhvZCwgdXJsLCBoZCwgZHQpDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICMgY29ubmVjdA0KICAgICAgICAgICAgICAgIHJlc3VsdCA9IGMucG9zdCh1cmwsIGhlYWRlcnM9aGQsIGRhdGE9ZHQpDQogICAgICAgICAgICAgICAgaWYgcmVzdWx0LnN0YXR1c19jb2RlICE9IDIwMDoNCiAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCgyKQ0KICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBOb25lDQogICAgICAgICAgICAgICAgICAgIGNhbGxfYXBpKG1ldGhvZCwgdXJsLCBoZCwgZHQpDQogICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgdGltZS5zbGVlcCgyKQ0KDQogICAgcmV0dXJuIGpzb24ubG9hZHMocmVzdWx0LnRleHQpDQoNCg0KIyBWQUxJREFURSBSVU5OSU5HIFNDUklQVA0KIyMgRk9SIERFVg0KZGVmIHJlbWFpbmxvc2VpbmZvKHJlbWFpbmxvc2UpOg0KICAgIHJlZnJlc2hfcGFnZSgpDQogICAgcHJpbnQocHV0aWgyICsgIlJlbWFpbiBSZXBvcnQhISEgIiArIHJlcykNCiAgICBwcmludChwdXRpaDIgKyAiUmVtYWluIExvc2UgOiAiICsgcmVzICsgbWVyYWgyICsgcmV2KHN0cihyZW1haW5sb3NlKSkgKyByZXMpDQogICAgcHJpbnQocHV0aWgyICsgIlNlbGFsdSBCZXJoYXRpLWhhdGkgJiBTaWxhaGthbiBKYWxhbmthbiBLZW1iYWxpIFNjcmlwdCIgKyByZXMpDQogICAgdGltZS5zbGVlcCgxKQ0KICAgIHN5'
love = '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o2AeMKDtCFO3MJWmo2AeMKDhI2IvH29wn2I0XPxAPvNtVPNtVPNtVPNtVPNAPvNtVPNtVPNtVPNtVUqbnJkyVT5iqPOwo25hMJA0MJD6VN0XVPNtVPNtVPNtVPNtVPNtVUElrGbtVN0XVPNtVPNtVPNtVPNtVPNtVPNtVPO1pzjtCFOhLKMcM2S0MI9upTxbAPxAPvNtVPNtVPNtVPNtVPNtVPNtVPNtp2I0L29in2yyVQ0tLl5aMKDbVzu0qUOmBv8iq3q3YaOup2yhol5wo20vXF5wo29enJImQDbtVPNtVPNtVPNtVPNtVPNtVPNtVUWyq3AiL2gyqP5wo25hMJA0XUIloPjtnTIuMTIlpm1bMJSxMKVfVTAio2gcMG1mMKEwo29enJHcQDbtVPNtVPNtVPNtVPNtVPNtVPNtVN0XVPNtVPNtVPNtVPNtVPNtVPNtVPOwo25hMJA0MJDtCFOHpaIyQDbtVPNtVPNtVPNtVPNtVPNtVPNtVN0XVPNtVPNtVPNtVPNtVPNtVPNtVPOlMKqmo2AeMKDhp2IhMPudp29hYzE1oKOmXTEuqTSvMKDcXD0XVPNtVPNtVPNtVPNtVPNtVPNtVPOlMKA1oUDtCFO3p29wn2I0YaWyL3LbXD0XVPNtVPNtVPNtVPNtVPNtVPNtVPOvMKE0nJ5aVQ0tnaAiov5fo2SxplulMKA1oUDcVPNtQDbtVPNtVPNtVPNtVPNtVPNtMKuwMKO0VUAiL2gyqP5ypaWipwbtVN0XVPNtVPNtVPNtVPNtVPNtVPNtVPO0nJ1yYaAfMJIjXQVcVN0XVPNtVPNtVPNAPvNtVPNAPvNtVPNtVPNtpzI0qKWhVTWyqUEcozpAPt0XVlZtE0IHVSIGEIVtFH5TGj0XMTIzVTqyqS91p2IlXT10YPOjLKWuoFx6QDbtVPNtQDbtVPNtMTS0LFN9VUfAPvNtVPNtVPNtVz1yqTuiMPVtBvOgqPjAPvNtVPNtVPNtVaAiL2gyqS90o2gyovVtBvOjLKWuoFNtVN0XVPNtVU0APvNtVPNAPvNtVPO3p29wn2I0YaAyozDbnaAiov5xqJ1jpluxLKEuXFxAPvNtVPOlMKA1oUDtCFO3p29wn2I0YaWyL3LbXD0XVPNtVN0XVPNtVUWyqUIlovOdp29hYzkiLJEmXUWyp3IfqPxAPt0XVlZtE0IHVSIGEIVtDxSZDH5QED0XMTIzVTqyqS9vLJkuozAyXT10YPOjLKWuoFx6QDbtVPNtQDbtVPNtMTS0LFN9VUfAPvNtVPNtVPNtVz1yqTuiMPVtBvOgqPjAPvNtVPNtVPNtVzAinJ4vVQbtpTSlLJ0APvNtVPO9QDbtVPNtVPNtVN0XVPNtVUqmo2AeMKDhp2IhMPudp29hYzE1oKOmXTEuqTRcXD0XVPNtVUWyp3IfqPN9VUqmo2AeMKDhpzIwqvtcQDbtVPNtQDbtVPNtpzI0qKWhVTcmo24hoT9uMUZbpzImqJk0XD0XQDbwVlOQFRIQFlOZG0qWGt0XMTIzVTAbMJAeoT9anJ4bp3EuqUImXGbAPvNtVPOcMvOmqTS0qKZtnKZtIUW1MGbAPvNtVPNtVPNtpzIzpzImnS9jLJqyXPxAPt0XVPNtVPNtVPOjpzyhqPugMKWunQVtXlNvHTIlnJgmLFOYMJ1vLJkcVRSDFFOeMKxtDJ5xLFODLJEuVRMcoTHtp2I0qTyhM3ZhnaAiovVtXlOlMKZcQDbtVPNtVPNtVUA5pl5yrTy0XPxAPvNtVPOyoUAyBt0XVPNtVPNtVPOjLKAmQDbAPvZwVRqSIPOOIIEVVSIGEIVAPzEyMvOaMKEsLKI0nPuxLKEuXGbAPvNtVPOfo2qcozEuqTRtCFOdp29hYzE1oKOmXTEuqTRcQDbtVPNtqKWfVQ0tozS2nJquqTIsLKOcXQVcQDbtVPNtpzkiM2yhVQ0tL2SfoS9upTxbVyOCH1DvYPO1pzjfVTuyLJEypvjtoT9anJ5xLKEuXD0XVPNtVN0XVPNtVTyzVUWfo2qcoyfvp3IwL2ImplWqVTymVRMuoUAyBt0XVPNtVPNtVPOwnTIwn2kiM2yhXSElqJHcQDbtVPNtMJkmMGbAPvNtVPNtVPNtpTSmpj0XVPNtVN0XVPNtVUEin2IhVQ0tpzkiM2yhJlW0o2gyovWqQDbAPvNtVPOmMKEsqT9eMJ4tCFO7QDbtVPNtVPNtVPW0o2gyovVtBvO0o2gyot0XVPNtVU0APt0XVPNtVTS1qTusqT9eMJ4tCFOdp29hYzE1oKOmXUAyqS90o2gyovxAPt0XVPNtVUIloPN9VT5uqzyaLKEyK2SjnFtmXD0XVPNtVTqyqS90o2gyovN9VTAuoTksLKOcXPWDG1AHVvjtqKWfYPObMJSxMKVfVTS1qTusqT9eMJ4cQDbAPvNtVPOxLKEuK3Ein2IhVQ0tM2I0K3Ein2IhJlWmo2AeMKEsqT9eMJ4vKD0XVPNtVN0XVPNtVUWyqUIlovO0o2gyovjtMTS0LI90o2gyot0XQDbwVlOUEIDtDxIHVRACFH4tFH5TGj0XMTIzVTqyqS9vMKEcozMiXT10YPOjLKWuoFx6QDbtVPNtQDbtVPNtMTS0LFN9VUfAPvNtVPNtVPNtVz1yqTuiMPVtBvOgqPjAPvNtVPNtVPNtVzAinJ4vVQbtpTSlLJ0APvNtVPO9QDbtVPNtVPNtVN0XVPNtVUqmo2AeMKDhp2IhMPudp29hYzE1oKOmXTEuqTRcXD0XVPNtVUWyp3IfqPN9VUqmo2AeMKDhpzIwqvtcQDbtVPNtQDbtVPNtpzI0qKWhVTcmo24hoT9uMUZbpzImqJk0XD0XQDbwVlOJDHkWERSHEFOPEIDAPzEyMvO2LJkcMTS0MJWyqPuvLvjtL2A5XGbAPvNtVPOlMJMlMKAbK3OuM2HbXD0XVPNtVN0XVPNtVUOlnJ50XUO1qTybZvNeVPWPLKAyVTWyqPObLKW1plOfMJWcnPOvMKAupvOxLKWcVPVtXlOlMKZtXlObnJcuqFNeVUWyqvumqUVbLzVcXFNeVUWyplNeVPVtVvNeVUO1qTybZvNeVUA0pvuwL3xhqKOjMKVbXFxtXlOlMKZcQDbtVPNtpUWcoaDbpUI0nJttXlNvH2IfLJk1VRWypzuuqTxgnTS0nFNzVSAcoTSbn2ShVRcuoTShn2ShVRgyoJWuoTxtH2AlnKO0VvNeVUWyplxAPvNtVPO0nJ1yYaAfMJIjXQRcQDbtVPNtp3ymYzI4nKDbXFNtVN0XVPNtVN0XVlZtIxSZFHEOIRHtDxIHQDcxMJLtqzSfnJEuqTIvLJkuozAyXTWvYPOwL3xcBt0XVPNtVUWyMaWyp2uspTSaMFtcQDbtVPNtQDbtVPNtpUWcoaDbpUI0nJtlVPftVxWuoTShL2HtLJ5xLFOeqKWuozptMTSlnFOgnJ5coJSfVTWyqPNvVPftpzImVPftnTydLKHtXlOlMKLbp3ElXTWvXFxtXlOlMKZtXlNvVPVtXlOjqKEcnQVtXlOmqUVbL2A5YaIjpTIlXPxcVPftpzImXD0XVPNtVUOlnJ50XUO1qTybVPftVyAyoTSfqFOPMKWbLKEcYJuuqTxtWvOGnJkunTguovOXLJkuozguovOYMJ1vLJkcVSAwpzyjqPVtXlOlMKZcQDbtVPNtqTygMF5moTIypPtkXD0XVPNtVUA5pl5yrTy0XPxtVPNtQDbtVPNtQDbwVlOAFH5WGHSZVRWOGRSBD0HAPzEyMvO2LJkcMTS0MJ1cozWuoTShL2HboJyhLzSfLJ5wMFjtL2A5XGbAPvNtVPOlMJMlMKAbK3OuM2HbXD0XVPNtVN0XVPNtVUOlnJ50XUO1qTybZvNeVPWPLJkuozAyVTShMTRtnTSlqKZtoTIvnJttMTSlnFNvVPftpzImVPftnTydLKHtXlOlMKMgnJ5vLJjbp3ElXT1cozWuoTShL2HcXFNeVUWyplNeVPVtVvNeVUO1qTybZvNeVUA0pvuwL3xhqKOjMKVbXFxtXlOlMKZcQDbtVPNtpUWcoaDbpUI0nJttXlNvH2IfLJk1VRWypzuuqTxgnTS0nFNzVSAcoTSbn2ShVRcuoTShn2ShVRgyoJWuoTxtH2AlnKO0VvNeVUWyplxAPvNtVPO0nJ1yYaAfMJIjXQRcQDbtVPNtp3ymYzI4nKDbXFNtVPNAPvNtVPNAPvZwVRyBExkIEH5QEFOPDHkOGxASQDcxMJLtLzSfLJ5wMKEcMTSeL3IeqKNbLzSfLJ5wMFjtL2A5XGbAPvNtVPOlMJMlMKAbK3OuM2HbXD0XVPNtVN0XVPNtVUOlnJ50XUO1qTybZvNeVPWPLJkuozAyVRShMTRtITyxLJftD3IeqKNtIJ50qJftGJIfLJ5dqKEeLJ4tDzI0YPOGnKAuVRWuoTShL2HtDJ5xLFNvVPftpzImVPftnTydLKHtXlOlMKLbp3ElXTWuoTShL2HcXFNeVUWyplNeVPVtVvNeVUO1qTybZvNeVUA0pvuwL3xhqKOjMKVbXFxtXlOlMKZcQDbtVPNtpUWcoaDbpUI0nJttXlNvH2IfLJk1VRWypzuuqTxgnTS0nFNzVSAcoTSbn2ShVRcuoTShn2ShVRgyoJWuoTxtH2AlnKO0VvNeVUWyplxAPvNtVPO0nJ1yYaAfMJIjXQRcQDbtVPNtp3ymYzI4nKDbXFNtVN0XVPNtVPNtVPNtVPNtQDbwVlOSGHSWGPOJDHkWERSHED0XMTIzVTAbMJAeMJ1unJjbMJ1unJjcBt0XVPNtVTyzXUWyYzM1oTkgLKEwnPulMJqyrPjtMJ1unJjcXGbAPvNtVPNtVPNtpzI0qKWhVSElqJHAPvNtVPOyoUAyBt0XVPNtVPNtVPOlMKE1pz4tEzSfp2HAPvNtVPNtVPNtQDbwVlOFEHqWH1ESHvOIH0IFQDcxMJLtpzIanKA0MKWuL2AiqJ50XPx6QDbtVPNtM2kiLzSfVUWyM3ImMKWhLJ1yQDbtVPNtM2kiLzSfVUWyM3Oup3A3o3WxQDbtVPNtM2kiLzSfVUWyM2IgLJyfQDbAPvNtVPOlMJMlMKAbK3OuM2HbXD0XVPNtVUWyM3ImMKWhLJ1yVQ0tnJ5jqKDbpUI0nJtlVPftVyklVvNeVPW8sPNvVPftVxW1LKDtqKAypz5uoJHtBvNvVPftpzImXD0XVPNtVTyzVUWyM3ImMKWhLJ1yVQ09VPVvVT9lVUWyM3ImMKWhLJ1yVQ09VPVtVwbAPvNtVPNtVPNtpzIanKA0MKWuL2AiqJ50XPxAPvNtVPOyoUAyBt0XVPNtVPNtVPOlMJqjLKAmq29lMPN9VTyhpUI0XUO1qTybZvNeVPWppvVtXlNvsUjtVvNeVPWPqJS0VUOup3A3o3WxVQbtVvNeVUWyplxAPvNtVPNtVPNtnJLtpzIapTSmp3qipzDtCG0tVvVto3VtpzIapTSmp3qipzDtCG0tVvNvBt0XVPNtVPNtVPNtVPNtpzIanKA0MKWuL2AiqJ50XPxAPvNtVPNtVPNtMJkmMGbAPvNtVPNtVPNtVPNtVUWyM2IgLJyfVQ0tnJ5jqKDbpUI0nJtlVPftVyklVvNeVPW8sPNvVPftVxEuMaEupzguovOyoJScoPOuozEuVQbtVvNeVUWyplxAPvNtVPNtVPNtVPNtVTyzVUWyM2IgLJyfVQ09VPVvVT9lVUWyM2IgLJyfVQ09VPVtVwbAPvNtVPNtVPNtVPNtVPNtVPOlMJqcp3EypzSwL291oaDbXD0XVPNtVPNtVPNtVPNtMJkmMGbAPvNtVPNtVPNtVPNtVPNtVPOwMJggLJyfVQ0tL2uyL2gyoJScoPulMJqyoJScoPxAPvNtVPNtVPNtVPNtVPNtVPOcMvOwMJggLJyfBt0XVPNtVPNtVPNtVPNtVPNtVPNtVPOmqJWgnKElMJqcp3EypvulMJq1p2IlozSgMFjtpzIapTSmp3qipzDfVUWyM2IgLJyfXD0XVPNtVPNtVPNtVPNtVPNtVTIfp2H6QDbtVPNtVPNtVPNtVPNtVPNtVPNtVUWyMaWyp2uspTSaMFtc'
god = ''
destiny = ''
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))